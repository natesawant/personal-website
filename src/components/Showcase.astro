---
interface Item {
  title: string;
  shortTitle?: string;
  team: string;
  shortTeam?: string;
  date: string;
  years: string;
  body: string;
  skills: string[];
}

interface Props {
  header: string;
  items: Item[];
  flipped?: boolean;
}

const { items, header, flipped } = Astro.props;

const uniqueYears = new Set(items.map((item) => item.years));

const createItemId = (item: Item) => {
  return `${item.shortTitle ? item.shortTitle : item.title} - ${
    item.shortTeam ? item.shortTeam : item.team
  }`;
};
---

<div
  id={header.toLowerCase()}
  class="relative w-full min-h-screen bg-skyline bg-black p-4 sm:p-12 md:p-20 lg:p-32 flex flex-col gap-5"
>
  <div
    class={`absolute top-0 bottom-0 ${flipped ? "left-0" : "right-0"} bg-accent-red w-1`}
  >
  </div>
  <h1
    class={` text-6xl text-white sm:text-7xl font-medium uppercase text-center ${flipped ? "xl:text-right" : "xl:text-left"}`}
  >
    {header}
  </h1>
  <div
    class={`flex flex-col-reverse gap-8 ${flipped ? "xl:flex-row-reverse" : "xl:flex-row"}`}
  >
    <div class="flex flex-col gap-8">
      {
        items.map((item) => (
          <div
            id={createItemId(item)}
            class="flex flex-col bg-black p-4 sm:p-12 gap-5"
          >
            <div>
              <h2 class="text-xl font-light text-white">
                {item.title} • {item.team}
              </h2>
              <h3 class="uppercase text-white text-lg font-normal">
                {item.date}
              </h3>
            </div>
            <p class="text-lg font-extralight">{item.body}</p>
            <div class="flex flex-row gap-3 text-nowrap text-base flex-wrap">
              {item.skills.map((skill) => (
                <div class="px-3 py-1 rounded-full font-normal text-white bg-skill-red w-min">
                  {skill}
                </div>
              ))}
            </div>
          </div>
        ))
      }
    </div>
    <div></div>
    <div
      class="bg-black p-4 sm:p-12 flex flex-col gap-5 text-nowrap font-extralight h-fit"
    >
      {
        Array.from(uniqueYears.values()).map((year: string) => (
          <div>
            <h3 class="text-white font-normal">{year}</h3>
            <ul class="list-disc list-inside">
              {items
                .filter((item) => item.years === year)
                .map((item) => (
                  <a
                    class="hover:text-accent-red duration-150 transition-colors"
                    href={"#" + createItemId(item)}
                  >
                    <li>
                      {item.shortTitle ? item.shortTitle : item.title} —{" "}
                      {item.shortTeam ? item.shortTeam : item.team}
                    </li>
                  </a>
                ))}
            </ul>
          </div>
        ))
      }
    </div>
  </div>
</div>
